{
  "default": {
    "cguid": "1",
    "type": "ProtoStubs",
    "version": "0.1",
    "description": "Description of MatrixProtoStub",
    "objectName": "MatrixProtoStub",
    "sourcePackageURL": "/sourcePackage",
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "MatrixProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "language": "Javascript ECMA5",
    "signature": "",
    "messageSchemas": "",
    "constraints": "",
    "hypertyCapabilities": "",
    "protocolCapabilities": "",
    "policies": "",
    "dataObjects": [],
    "configuration": {
      "homeserver": "matrix2.rethink.com",
      "messagingnode": "ws://matrix2.rethink.com:8001/stub/connect"
    }
  },
  "google.com": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "IdpProxyProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": 1,
    "type": "ProtoStubs",
    "version": "0.1",
    "description": "Description of IdpProxyProtoStub",
    "objectName": "IdpProxyProtoStub",
    "configuration": {},
    "constraints": "",
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  }
}
